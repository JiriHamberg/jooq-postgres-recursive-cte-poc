/*
 * This file is generated by jOOQ.
 */
package com.example.possutest.db.tables;


import com.example.possutest.db.Indexes;
import com.example.possutest.db.Keys;
import com.example.possutest.db.Public;
import com.example.possutest.db.tables.records.PermissionGroupRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionGroup extends TableImpl<PermissionGroupRecord> {

    private static final long serialVersionUID = 329535038;

    /**
     * The reference instance of <code>public.permission_group</code>
     */
    public static final PermissionGroup PERMISSION_GROUP = new PermissionGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionGroupRecord> getRecordType() {
        return PermissionGroupRecord.class;
    }

    /**
     * The column <code>public.permission_group.id</code>.
     */
    public final TableField<PermissionGroupRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('permission_group_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.permission_group.name</code>.
     */
    public final TableField<PermissionGroupRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>public.permission_group.parent_id</code>.
     */
    public final TableField<PermissionGroupRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.permission_group</code> table reference
     */
    public PermissionGroup() {
        this(DSL.name("permission_group"), null);
    }

    /**
     * Create an aliased <code>public.permission_group</code> table reference
     */
    public PermissionGroup(String alias) {
        this(DSL.name(alias), PERMISSION_GROUP);
    }

    /**
     * Create an aliased <code>public.permission_group</code> table reference
     */
    public PermissionGroup(Name alias) {
        this(alias, PERMISSION_GROUP);
    }

    private PermissionGroup(Name alias, Table<PermissionGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private PermissionGroup(Name alias, Table<PermissionGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PermissionGroup(Table<O> child, ForeignKey<O, PermissionGroupRecord> key) {
        super(child, key, PERMISSION_GROUP);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GROUP_NAME_IDX, Indexes.PERMISSION_GROUP_PKEY);
    }

    @Override
    public Identity<PermissionGroupRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PERMISSION_GROUP;
    }

    @Override
    public UniqueKey<PermissionGroupRecord> getPrimaryKey() {
        return Keys.PERMISSION_GROUP_PKEY;
    }

    @Override
    public List<UniqueKey<PermissionGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<PermissionGroupRecord>>asList(Keys.PERMISSION_GROUP_PKEY);
    }

    @Override
    public List<ForeignKey<PermissionGroupRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PermissionGroupRecord, ?>>asList(Keys.PERMISSION_GROUP__PERMISSION_GROUP_PARENT_ID_FKEY);
    }

    public com.example.possutest.db.tables.PermissionGroup permissionGroup() {
        return new com.example.possutest.db.tables.PermissionGroup(this, Keys.PERMISSION_GROUP__PERMISSION_GROUP_PARENT_ID_FKEY);
    }

    @Override
    public PermissionGroup as(String alias) {
        return new PermissionGroup(DSL.name(alias), this);
    }

    @Override
    public PermissionGroup as(Name alias) {
        return new PermissionGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionGroup rename(String name) {
        return new PermissionGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PermissionGroup rename(Name name) {
        return new PermissionGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
