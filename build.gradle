buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath 'org.jooq:jooq-codegen:3.12.3'
		classpath 'org.postgresql:postgresql:42.2.9'
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-artemis'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer)
		.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.12.3.xsd') {
			jdbc() {
				driver('org.postgresql.Driver')
				url('jdbc:postgresql://localhost:5432/test')
				user('test')
				password('test')
			}
			generator() {
				database() {
					inputSchema('public')
					excludes('flyway_schema_history')
				}
				generate([:]) {
					pojos true
					daos true
				}
				target() {
					packageName('com.example.possutest.db')
					directory('src/main/java')
				}
			}
		}

tasks.register("jooqCodegen") {
	doLast {
		org.jooq.codegen.GenerationTool.generate(writer.toString())
	}
}